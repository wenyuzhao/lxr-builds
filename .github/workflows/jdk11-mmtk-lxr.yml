name: jdk11-mmtk-lxr

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # daily at 00:00

jobs:
  build:
    permissions:
      contents: "read"
      id-token: "write"
    strategy:
      matrix:
        variant: ["mmtk-lxr"]
        debug-level: ["release"]
        pgo: [true, false]
    name: jdk11-mmtk-lxr-${{ matrix.debug-level }}${{ matrix.pgo == true && '-pgo' || '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Google auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: Install build dependencies
        run: >
          sudo apt-get update && sudo apt-get install -y \
            build-essential libfreetype6-dev libcups2-dev \
            libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev \
            libasound2-dev libffi-dev autoconf zip unzip libfontconfig1-dev pigz
      - name: Checkout MMTk/OpenJDK binding
        uses: actions/checkout@v3
        with:
          repository: wenyuzhao/mmtk-openjdk
          ref: lxr
          path: ./mmtk-openjdk
      - name: Extract date and revisions
        id: revisions
        run: |
          # Get current date
          current_datetime=$(date)
          current_date=$(date +'%Y%m%d')
          # Get openjdk revision
          openjdk_revision=$(sed -n 's/^openjdk_version.=."\(.*\)"$/\1/p' < mmtk-openjdk/mmtk/Cargo.toml)
          # Get mmtk-openjdk revision
          pushd ./mmtk-openjdk
          mmtk_openjdk_revision=$(git rev-parse HEAD)
          popd
          # Output variables
          echo "::set-output name=datetime::$current_datetime"
          echo "::set-output name=date::$current_date"
          echo "::set-output name=openjdk-revision::$openjdk_revision"
          echo "::set-output name=mmtk-openjdk-revision::$mmtk_openjdk_revision"
      - name: Generate versions.yml
        id: versions-yml
        run: |
          echo "date: ${{ steps.revisions.outputs.datetime }}" > ./versions.yml
          echo "variant: ${{ matrix.debug-level }}, ${{ matrix.variant }}" >> ./versions.yml
          echo "openjdk: ${{ steps.revisions.outputs.openjdk-revision }}" >> ./versions.yml
          echo "mmtk-openjdk: ${{ steps.revisions.outputs.mmtk-openjdk-revision }}" >> ./versions.yml
          echo "pgo: ${{ matrix.pgo }}" >> ./versions.yml
          echo "::set-output name=file::$(realpath ./versions.yml)"
      - name: Checkout JDK MMTk fork
        uses: actions/checkout@v3
        with:
          repository: mmtk/openjdk
          path: ./openjdk
          ref: ${{ steps.revisions.outputs.openjdk-revision }}
      - name: Configure OpenJDK
        run: sh configure --disable-warnings-as-errors --with-debug-level=${{ matrix.debug-level }} --with-target-bits=64 --with-jvm-features=shenandoahgc
        working-directory: ./openjdk
      - name: Build OpenJDK
        if: ${{ matrix.pgo == false }}
        run: |
          make CONF=linux-x86_64-normal-server-${{ matrix.debug-level }} THIRD_PARTY_HEAP=$PWD/../mmtk-openjdk/openjdk product-bundles
          cp ${{ steps.versions-yml.outputs.file }} ./build/linux-x86_64-normal-server-${{ matrix.debug-level }}/bundles/versions.yml
        working-directory: ./openjdk
      - name: Build OpenJDK for PGO profile generation
        if: ${{ matrix.pgo == true }}
        run: |
          pushd ../mmtk-openjdk/mmtk
            cargo install cargo-binutils
            rustup component add llvm-tools
          popd
          rm -rf /tmp/pgo-data
          make RUSTFLAGS=-Cprofile-generate=/tmp/pgo-data CONF=linux-x86_64-normal-server-${{ matrix.debug-level }} THIRD_PARTY_HEAP=$PWD/../mmtk-openjdk/openjdk product-bundles
        working-directory: ./openjdk
      - name: Generate PGO profile
        if: ${{ matrix.pgo == true }}
        run: |
          RUST_BACKTRACE=1 MMTK_PLAN=LXR ./openjdk/build/linux-x86_64-normal-server-release/images/jdk/bin/java -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+ExitOnOutOfMemoryError --add-exports java.base/jdk.internal.ref=ALL-UNNAMED -XX:+UseThirdPartyHeap -Xms20M -Xmx20M -jar ./gcbench/gcbench.jar
      - name: Build OpenJDK with PGO
        if: ${{ matrix.pgo == true }}
        run: |
          pushd ../mmtk-openjdk/mmtk
            ~/.cargo/bin/rust-profdata merge -o /tmp/pgo-data/merged.profdata /tmp/pgo-data
            rm -rf ./target/x86_64-unknown-linux-gnu/release/build/pfm-sys-* # Remove pfm-sys-* to avoid build error
          popd
          make RUSTFLAGS=-Cprofile-use=/tmp/pgo-data/merged.profdata CONF=linux-x86_64-normal-server-${{ matrix.debug-level }} THIRD_PARTY_HEAP=$PWD/../mmtk-openjdk/openjdk product-bundles
          cp ${{ steps.versions-yml.outputs.file }} ./build/linux-x86_64-normal-server-${{ matrix.debug-level }}/bundles/versions.yml
        working-directory: ./openjdk
      - name: Upload as artifact
        uses: actions/upload-artifact@v4
        with:
          name: jdk11-mmtk-lxr-${{ matrix.debug-level }}${{ matrix.pgo == true && '-pgo' || '' }}-bundles
          path: ./openjdk/build/linux-x86_64-normal-server-${{ matrix.debug-level }}/bundles/*
      - name: Generate bundle file
        id: bundle
        run: |
          # Find output bundle
          output_bundle_name=$(ls ./openjdk/build/linux-x86_64-normal-server-${{ matrix.debug-level }}/bundles/*.tar.gz | grep -v -e symbols -e demos)
          # Bundle names for uploading
          common_name=jdk11-linux-x86_64-normal-server-${{ matrix.variant }}-${{ matrix.debug-level }}${{ matrix.pgo == true && '-pgo' || '' }}
          bundle_file=$common_name-${{ steps.revisions.outputs.date }}.tar.gz
          # Add versions.yml to the bundle
          mv $output_bundle_name ./archive.tar.gz
          mkdir ./archive
          tar xf ./archive.tar.gz -C ./archive
          jdk_directory_path=$(realpath ./archive/jdk-*)
          jdk_directory_name=$(basename $jdk_directory_path)
          cp ./versions.yml $jdk_directory_path/versions.yml
          rm ./archive.tar.gz
          pushd ./archive &&
          tar czf ../archive.tar.gz $jdk_directory_name
          popd
          # Create bundles for uploading
          mv ./archive.tar.gz ./$bundle_file
          # Set output variables
          echo "::set-output name=file::$bundle_file"
      # - name: Upload to GCS
      #   uses: google-github-actions/upload-cloud-storage@v2
      #   with:
      #     path: ${{ steps.bundle.outputs.file }}
      #     destination: lxr-builds
